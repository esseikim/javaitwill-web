<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" 
    xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd">

    <!-- bean definitions here -->
    <!-- 기본생성자 =>  property(setter 메서드) -->
    <!--스프링프레임워크가 실행되면서 HikarConfig 클래스의 기본 생성자를 호출해줌  -->
     <!-- HikariConfig hikariConfig= new HikarConfig();  -->
            <bean id="hikariConfig"  class="com.zaxxer.hikari.HikariConfig"><!-- id: 변수명 -->
          
          
              <!-- hikariConfig.setDriverClassName("....") 메서드 호출 -->
            <property name="driverClassName" value="oracle.jdbc.OracleDriver" /> <!-- hikariconfig.setDriverClassName("oracle.jdbc.OracleDriver"); -->
            <property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:xe"/>  <!-- config.setJdbcUrl("jdbc:oracle:thin:@localhost:1521:xe"); -->
            <property name="username" value="scott"/> <!--  config.setUsername("scott");  -->
            <property name="password" value="tiger"/>  <!--  config.setPassword("tiger"); -->
            </bean> <!-- springFarmework가 사용. -->
              <!-- 결과: hikariConfig객체가 생성됨.  -->
              <!-- bean == instance(생성된 객체) / bean내의 property는 setter() 호출.-->
            
      <!--   만들어진  HikariConfig 객체로 DataSource 객체를 만듦. 아규먼트 가지는 생성자 호출.  -->
                <!-- HikariDataSource dataSource= new HikariDataSource(hikariConfig);-->
            <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource">
                    <constructor-arg ref="hikariConfig" />   <!-- argument 설정. ref: 참조변수(hikariConfig)  -->
            </bean>
            
            
            
            <!-- SqlSessionFactoryBean 객체:
                    Data Source(Connection Pool)을 이용해서 SQL 문장들을 실행하고 결과 처리를 수행하는 객체. 
                    ==> Dao    
                    ==> Mybatis가 연결.
                    ==> context Framwork에 설정(가져오라고)             
                     java spring oracle 연결해주는 게 mybatis. db에서 가져오는 data가 dao(table, domain), mybatis: db와 java를 연결
                     연결, 가지고오고 연결해제 <- mybatis
             -->  
            <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
                    <property name="dataSource"  ref="dataSource"></property> 
                    <!-- property name: 클래스가 가지고 있는 맴버 변수(field) 이름-> setdataSource --> 
                    <!-- ref: 생성된 객체. id에 해당하는 객체 찾아감. 즉, HikariDataSource를 객체를 아규먼트로 전달.
                     name: 선언된 클래스의 filed -> setter메서드 호출 가능
                     name: int dataSource, ref: new dataSource  -->
                    <property name="mapperLocations"  value="classpath:/mappers/**/*.xml"></property>  <!-- value: 아규먼트를 문자열로 전달 -->
                    <!--class path를 찾아감. 프로젝트가 사용할 수 있는 폴더. Java Resources의 폴더 검색.  
                    /**: mappers 폴더에서 하위 폴더를 더 만들어도 됨. 몇개가 있든 괜찮음-->
                    
                    <!-- value: argument의 값을 문자열로 전달. 
                           classpath를 찾아간다. 즉, classpath란: Java Resources의 main 하위 폴더들. 즉, 프로젝트가 사용할 수 있는 폴더들
                       **: 하위 폴더를 더 만들어도 된다. 즉, mappers 밑의 하위폴더들이 몇개 더 있어도 된다.
                         *: 확장작가 xml인 모든 파일.
                           -->
            </bean>
            
            
            
            <!-- MyBatis 프레임워크에서 생성하고 관리하는 bean -->
            <!-- repository를 base-package와 그 하위 패키지에서 검색함. -->
            <mybatis:scan base-package="com.itwill.spring2.repository"/>
            <!-- base-package와 그 하위 클래스에 인터페이스를 만들면,  구현 클래스 자동으로 생성  -->
             <!-- 특정 패키지 아래에 있는 것(하위 폴더)을 검사헤서 조건(애너테이션 등)이 있는지 검색 및 객체 생성 
             해당 패키지 아래에 있는 인터페이스의 객체를 자동 생성 -> 인터페이스의 추상메서드를 구현해야 하는데 mapper를 찾음. mapper의 주소로 가서 생성 후 구현하는 클래스를 가지고 온다. 즉, 객체를 생성한다.
     -->
            
            <!-- Service 애너테이션이 설정된 객체들을 생성하고 관리. spring container가 스캔함. 즉, 서비스 클래스를 만듬 -->
            <context:component-scan base-package="com.itwill.spring2.service"></context:component-scan>
</beans>